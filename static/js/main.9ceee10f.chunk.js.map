{"version":3,"sources":["reducers/areArticlesBeingFetched.js","reducers/articles.js","reducers/index.js","actionCreators/index.js","components/Article.js","components/Article.container.js","components/ArticleList.js","components/ArticleList.container.js","components/Info.js","components/NumberOfSelectedArticles.js","components/NumberOfSelectedArticles.container.js","components/Weight.js","components/Weight.container.js","App.js","AppContainer.js","serviceWorker.js","index.js"],"names":["areArticlesBeingFetched","state","arguments","length","undefined","type","articles","action","map","article","Object","objectSpread","isSelected","name","articleName","combineReducers","fetchArticles","dispatch","asyncToGenerator","regenerator_default","a","mark","_callee","response","wrap","_context","prev","next","fetch","sent","json","stop","toggleArticleSelection","Article","_ref","handleCheckboxChange","weight","checkboxId","concat","react_default","createElement","data-selector","htmlFor","style","display","id","onChange","checked","connect","ArticleList","Article_container","key","Info","react","NumberOfSelectedArticles_container","Weight_container","NumberOfSelectedArticles","value","getNumberOfSelectedArticles","filter","Weight","getSelectedArticlesTotalWeight","reduce","sum","App","this","props","className","marginTop","ArticleList_container","components_Info","Component","Boolean","window","location","hostname","match","store","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","render","es","AppContainer","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9ceee10f.chunk.js","sourcesContent":["const areArticlesBeingFetched = (state = false, action) => {\n  switch (action.type) {\n    case 'FETCH_ARTICLES__BEGIN':\n      return true;\n    case 'FETCH_ARTICLES__RESOLVE':\n      return false;\n    default:\n      return state;\n  }\n};\n\nexport default areArticlesBeingFetched;","const articles = (state = [], action) => {\n  switch (action.type) {\n    case 'FETCH_ARTICLES__RESOLVE':\n      return action.articles.map(article => ({\n        ...article,\n        isSelected: false,\n      }));\n    case 'TOGGLE_ARTICLE_SELECTION':\n      return state.map(article =>\n        article.name === action.articleName\n          ? { ...article, isSelected: !article.isSelected }\n          : article\n      );\n    default:\n      return state;\n  }\n};\n\nexport default articles;\n","import { combineReducers } from 'redux';\nimport areArticlesBeingFetched from './areArticlesBeingFetched';\nimport articles from './articles';\n\nexport default combineReducers({\n  areArticlesBeingFetched,\n  articles,\n});\n","export const fetchArticles = dispatch => async () => {\n  dispatch({\n    type: 'FETCH_ARTICLES__BEGIN',\n  });\n  const response = await fetch(\n    'https://packing-list-weight-api.herokuapp.com/articles'\n  );\n  const articles = await response.json();\n  dispatch({\n    type: 'FETCH_ARTICLES__RESOLVE',\n    articles,\n  });\n};\n\nexport const toggleArticleSelection = dispatch => articleName => () => {\n  dispatch({\n    type: 'TOGGLE_ARTICLE_SELECTION',\n    articleName,\n  });\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Article = ({ handleCheckboxChange, isSelected, name, weight }) => {\n  const checkboxId = `checkbox-${name}`;\n\n  return (\n    <label\n      data-selector=\"Article\"\n      htmlFor={checkboxId}\n      style={{ display: 'block' }}\n    >\n      <input\n        type=\"checkbox\"\n        id={checkboxId}\n        onChange={handleCheckboxChange}\n        checked={isSelected}\n      />\n      {`${name} (${weight}kg)`}\n    </label>\n  );\n};\n\nArticle.propTypes = {\n  handleCheckboxChange: PropTypes.func.isRequired,\n  isSelected: PropTypes.bool.isRequired,\n  name: PropTypes.string.isRequired,\n  weight: PropTypes.number.isRequired,\n};\n\nexport default Article;\n","import { connect } from 'react-redux';\n\nimport { toggleArticleSelection } from '../actionCreators';\nimport { Article } from '.';\n\nconst mapStateToProps = () => ({});\n\nconst mapDispatchToProps = (dispatch, { name }) => ({\n  handleCheckboxChange: toggleArticleSelection(dispatch)(name),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Article);","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { ArticleContainer } from '.';\n\nconst ArticleList = ({ articles }) => (\n  <ul>\n    {articles.map(article => (\n      <ArticleContainer\n        key={article.name}\n        isSelected={article.isSelected}\n        name={article.name}\n        weight={article.weight}\n      />\n    ))}\n  </ul>\n);\n\nArticleList.propTypes = {\n  articles: PropTypes.array.isRequired,\n};\n\nexport default ArticleList;","import { connect } from 'react-redux';\n\nimport { ArticleList } from '.';\n\nconst mapStateToProps = ({ articles }) => ({\n  articles,\n});\n\nconst mapDispatchToProps = () => ({});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ArticleList);","import React, { Fragment } from 'react';\nimport { NumberOfSelectedArticlesContainer, WeightContainer } from '.';\n\nconst Info = () => (\n  <Fragment>\n    <NumberOfSelectedArticlesContainer />\n    <WeightContainer />\n  </Fragment>\n);\n\nexport default Info;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst NumberOfSelectedArticles = ({ value }) => (\n  <div data-selector=\"NumberOfSelectedArticles\">{`Number of selected articles: ${value}`}</div>\n);\n\nNumberOfSelectedArticles.propTypes = {\n  value: PropTypes.number.isRequired,\n};\n\nexport default NumberOfSelectedArticles;\n","import { connect } from 'react-redux';\n\nimport { NumberOfSelectedArticles } from '.';\n\nconst getNumberOfSelectedArticles = articles =>\n  articles.filter(article => article.isSelected).length;\n\nconst mapStateToProps = ({ articles }) => ({\n  value: getNumberOfSelectedArticles(articles),\n});\n\nconst mapDispatchToProps = () => ({});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(NumberOfSelectedArticles);","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Weight = ({ value }) => (\n  <div data-selector=\"Weight\">{`Weight: ${value}kg`}</div>\n);\n\nWeight.propTypes = {\n  value: PropTypes.number.isRequired,\n};\n\nexport default Weight;\n","import { connect } from 'react-redux';\n\nimport { Weight } from '.';\n\nconst getSelectedArticlesTotalWeight = articles =>\n  articles\n    .filter(article => article.isSelected)\n    .reduce((sum, article) => sum + article.weight, 0);\n\nconst mapStateToProps = ({ articles }) => ({\n  value: getSelectedArticlesTotalWeight(articles),\n});\n\nconst mapDispatchToProps = () => ({});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Weight);","import React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport './App.css';\n\nimport { ArticleListContainer, Info } from './components';\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.fetchArticles();\n  }\n\n  render() {\n    const { areArticlesBeingFetched } = this.props;\n\n    return (\n      <div className=\"App\">\n        {areArticlesBeingFetched ? (\n          <div data-selector=\"App-isLoading\" style={{ marginTop: '1em' }}>\n            Loading…\n          </div>\n        ) : (\n          <Fragment>\n            <ArticleListContainer />\n            <Info />\n          </Fragment>\n        )}\n      </div>\n    );\n  }\n}\n\nApp.propTypes = {\n  areArticlesBeingFetched: PropTypes.bool.isRequired,\n  fetchArticles: PropTypes.func.isRequired,\n};\n\nexport default App;","import { connect } from 'react-redux';\nimport { fetchArticles } from './actionCreators';\nimport App from './App';\n\nconst mapStateToProps = ({ areArticlesBeingFetched }) => ({\n  areArticlesBeingFetched,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchArticles: fetchArticles(dispatch),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","/* eslint-disable */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { applyMiddleware, createStore } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\nimport './index.css';\nimport AppContainer from './AppContainer';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nReactDOM.render(\n  <Provider store={store}>\n    <AppContainer />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}